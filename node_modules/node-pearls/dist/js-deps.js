"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _cliConsole = require("cli-console");

var _cliConsole2 = _interopRequireDefault(_cliConsole);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babel = require("babel-core");


// 查找代码里的所有依赖
function jsDeps(content) {
	var deps = [];

	try {
		// 提取依赖
		babel.transform(content, {
			compact: false,
			plugins: [function (_ref) {
				var t = _ref.types;

				return {
					visitor: {
						CallExpression: {
							enter: function enter(path) {
								var node = path.node;
								// 匹配require(string)
								if (node.callee.type === "Identifier" && node.callee.name === "require" && node.arguments[0] && node.arguments[0].type === "StringLiteral" && !path.scope.hasBinding("require")) {
									deps.push(node.arguments[0].value);
								}
							}
						}
					}
				};
			}]
		});
	} catch (e) {
		_cliConsole2.default.error("find deps error");
		_cliConsole2.default.log(e);
	}

	return deps;
};

jsDeps.replace = function (content, fn) {
	if ((typeof fn === "undefined" ? "undefined" : _typeof(fn)) === "object") {
		var obj = fn;
		fn = function fn(key) {
			var value = obj[key];
			if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") {
				return value;
			} else if (typeof value !== "undefined") {
				return {
					modId: value
				};
			}
		};
	}

	try {
		// 提取依赖
		content = babel.transform(content, {
			compact: false,
			sourceMaps: process.env.SM ? "inline" : false,
			plugins: [function (_ref2) {
				var t = _ref2.types;

				// 根据modId的类型，生成相应的节点
				function createModId(modId) {
					switch (typeof modId === "undefined" ? "undefined" : _typeof(modId)) {
						case "string":
							return t.StringLiteral(modId);
						case "number":
							return t.NumericLiteral(modId);
					}
					throw new Error("modId'" + modId + "'不是有效的类型");
				}
				// 向节点添加注释
				function addComments(node, comments) {
					if (!comments.trim()) {
						return;
					}

					if (!node.trailingComments) {
						node.trailingComments = [];
					}

					comments.split("\n").forEach(function (comment) {
						node.trailingComments.push(t.StringLiteral(comment));
					});
				}

				return {
					visitor: {
						CallExpression: {
							enter: function enter(path) {
								var node = path.node;
								// 匹配require(string)
								if (node.callee.type === "Identifier" && node.callee.name === "require" && node.arguments[0] && node.arguments[0].type === "StringLiteral" && !path.scope.hasBinding("require")) {
									var modInfo = fn(node.arguments[0].value, path);

									if (!modInfo) {
										return;
									}

									if (modInfo instanceof Array) {
										if (modInfo.some(function (item) {
											return !!item.requireName;
										})) {
											path.replaceWith(t.ArrayExpression(modInfo.map(function (modInfo) {
												var modId = createModId(modInfo.modId);
												if (modInfo.comments) {
													addComments(modId, modInfo.comments);
												}

												return t.CallExpression(t.Identifier(modInfo.requireName || "require"), modId);
											})));
										} else {
											node.arguments[0] = t.ArrayExpression(modInfo.map(function (modInfo) {
												var modId = createModId(modInfo.modId);
												if (modInfo.comments) {
													addComments(modId, modInfo.comments);
												}
												return modId;
											}));
										}
										return;
									}

									if (!modInfo.modId) {
										path.replaceWith(t.NullLiteral());
										return;
									}

									// 修改require的模块ID
									node.arguments[0] = createModId(modInfo.modId);
									// 修改require的方法名
									if (modInfo.requireName) {
										node.callee.name = modInfo.requireName;
									}
									// 添加注释
									if (modInfo.comments) {
										addComments(node.arguments[0], modInfo.comments);
									}
								}
							}
						}
					}
				};
			}]
		}).code;
	} catch (e) {
		_cliConsole2.default.error("replace deps error");
		_cliConsole2.default.log(e);
		return "";
	}

	return content;
};

exports.default = jsDeps;