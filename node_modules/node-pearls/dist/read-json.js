"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _cliConsole = require("cli-console");

var _cliConsole2 = _interopRequireDefault(_cliConsole);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseJson(content, file) {
	// 删除注释
	content = content.replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|\/\*[\S\s]*?\*\/|\/\/.*/g, function (match) {
		if (/^["']/.test(match)) {
			// 排除字符串中的注释符
			return match;
		} else {
			return "";
		}
	});

	// 解析json
	try {
		content = JSON.parse(content.trim());
	} catch (e) {
		_cliConsole2.default.error("解析json文件错误");
		_cliConsole2.default.log(file);
		_cliConsole2.default.log(content);
		content = null;
		//throw e;
	}

	return content;
}

// 异步读取json文件
function readJson(file, callback) {
	_fs2.default.exists(file, function (isExists) {
		if (isExists) {
			_fs2.default.readFile(file, {
				encoding: "utf8"
			}, function (err, content) {
				if (err) {
					_cliConsole2.default.error("\u8BFB\u53D6\u6587\u4EF6" + file + "\u5931\u8D25");
					_cliConsole2.default.log(err);
					//throw err;
					callback(null);
					return;
				}

				callback(parseJson(content, file));
			});
		} else {
			callback(null);
		}
	});
}

// 同步读取json文件
readJson.sync = function (file) {
	if (_fs2.default.existsSync(file)) {
		var content = _fs2.default.readFileSync(file, {
			encoding: "utf8"
		});

		return parseJson(content, file);
	} else {
		return null;
	}
};

exports.default = readJson;