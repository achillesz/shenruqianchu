var fs = require("fs");
var path = require("path");
var glob = require("glob");
var babel = require("babel-core");
var template = require("babel-template");
var utils = require("node-pearls");

module.exports = function(options, callback){
	var matchs = options.matchs || "**/*.js";
	if(!(matchs instanceof Array)){
		matchs = [matchs];
	}

	ignore = options.ignore || "node_modules/**/*";

	utils.asyncList(matchs.map(function(match){
		return function(callback){
			glob(match, {
				cwd: options.src,
				ignore: ignore
			}, function(err, files){
				if(err){
					throw err;
				}

				files.forEach(function(file){
					babel.transformFile(path.join(options.src, file), {
						presets: options.presets || [
							["env", {
								"targets": {
									"node": "current"
								}
							}],
							"stage-0"
						],
						plugins: options.plugins /*[function(){
							var t = babel.types;

							return {
								visitor: {
									CatchClause: function(path){
										path.node.body.body.unshift(
											template("process.env.CATCH_ERROR && console.error(" + path.node.param.name + ")")()
										);
									}
								}
							};
						}].concat(options.plugins || [])*/
					}, function(err, result){
						if(err){
							throw err;
						}

						var distFile = path.join(options.output, file);
						utils.mkdirs.sync(path.dirname(distFile));
						fs.writeFileSync(distFile, result.code);
					});
				});

				// 移动其他文件
				if(options.src !== options.output){
					glob("**/*", {
						cwd: options.src,
						ignore: options.copyIgnore || ignore,
						nodir: true
					}, function(err, _files){
						if(err){
							throw err;
						}

						_files.forEach(function(file){
							if(files.indexOf(file) === -1){
								var distFile = path.join(options.output, file);
								utils.mkdirs.sync(path.dirname(distFile));
								fs.writeFileSync(distFile, fs.readFileSync(path.join(options.src, file)));
							}
						});

						callback && callback();
					});
				}else{
					callback && callback();
				}
			});
		};
	})).then(callback);
};