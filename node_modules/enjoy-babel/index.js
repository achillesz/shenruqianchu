"use strict";

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const babel = require("babel-core");

function checkSourceMap(options) {
	if (process.env.SM) {
		options.sourceMaps = 'inline';
	}
}

module.exports = {
	core: babel,
	types: babel.types,
	fs: {
		readFile: function (file, options, callback) {
			if (process.env.SM && (options === "utf8" || options.encoding === "utf8")) {
				return babel.transformFile(file, {
					compact: false,
					sourceFileName: file,
					sourceMaps: "inline"
				}, function (err, result) {
					callback(err, result.code);
				});
			} else {
				return _fs2.default.readFile(file, options, callback);
			}
		},
		readFileSync: function (file, options) {
			if (process.env.SM && (options === "utf8" || options.encoding === "utf8")) {
				return babel.transformFileSync(file, {
					compact: false,
					sourceFileName: file,
					sourceMaps: "inline"
				}).code;
			} else {
				return _fs2.default.readFileSync(file, options);
			}
		}
	},
	transform: function (code, options) {
		checkSourceMap(options);

		return babel.transform(code, options);
	},
	transformFile: function (filename, options, callback) {
		checkSourceMap(options);

		return babel.transformFile(filename, options, callback);
	},
	transformFileSync: function (filename, options) {
		checkSourceMap(options);

		return babel.transformFileSync(filename, options);
	},
	transformFromAst: function (ast, code, options) {
		checkSourceMap(options);

		return babel.transformFromAst(ast, code, options);
	},
	traverse: function (ast, visitor) {
		return babel.traverse(ast, visitor);
	}
};